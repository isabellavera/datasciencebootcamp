# -*- coding: utf-8 -*-
"""Isabella_Vera_HW2_DSBootcamp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QerWaBO4Zwit-iP2M9hA3k3cPxQxtyom

**numpy**
1. Define two custom numpy arrays, say A and B. Generate two new numpy arrays by stacking A and B vertically and horizontally.
"""

# Define two custom arrays

import numpy as np

A = np.array([[13, 80, 31,5],[90, 5, 55,1]])
B = np.array([[2, 1, 8,13],[14, 80, 22, 5]])

print("Array A:")
print(A)

print("\nArray B:")
print(B)

# Stack the arrays
C = np.vstack((A,B))
print("stacked vertical:")
print(C)

D = np.hstack((A,B))
print("Stacked horizontal:")
print(D)

"""2. Find common elements between A and B. [Hint: Intersection of two sets]"""

#find common elements
common_elements= np.intersect1d(A,B)
print("common elements")
print(common_elements)

"""3. Extract all numbers from A which are within a specific range. eg between 5 and 10. [Hint: np.where() might be useful or boolean masks]"""

# Extract numbers between 5 and 50
extract= np.where((A>=5) & (A<=50))
range_extract=A[extract]

print(range_extract)

"""Filter the rows of iris_2d that has petallength (3rd column) > 1.5 and sepallength (1st column) < 5.0

"""

# Load the dataset
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0, 1, 2, 3])

# Apply conditions:
# petallength (3rd column, index 2) > 1.5
# sepallength (1st column, index 0) < 5.0
filtered = iris_2d[(iris_2d[:, 2] > 1.5) & (iris_2d[:, 0] < 5.0)]
print("Filtered rows where petallength > 1.5 and sepallength < 5.0:")
print(filtered)

"""**PANDAS**

1.From df filter the 'Manufacturer', 'Model' and 'Type' for every 20th row starting from 1st (row 0).

"""

import numpy as np
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv')

#filter every 20th
filter1 = df.iloc[::20, :][['Manufacturer', 'Model', 'Type']]
print(filter1)

"""2. Replace missing values in Min.Price and Max.Price columns with their respective mean."""

df['Min.Price'] = df['Min.Price'].fillna(df['Min.Price'].mean())
df['Max.Price'] = df['Max.Price'].fillna(df['Max.Price'].mean())

"""3. How to get the rows of a dataframe with row sum > 100?

"""

df2 = pd.DataFrame(np.random.randint(10, 40, 60).reshape(-1, 4))

rows_gt_100 = df2[df2.sum(axis=1) > 100]
print(rows_gt_100)